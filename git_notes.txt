1、Git安装后设置用户名和地址
	git config --global user.name "Your name"
	git config --global user.email "email@example.com"
2、Git仓库建立
	mkdir learngit	创建空目录learngit
	cd learngit	更改路径，进入learngit文件夹
	cd ..	进入文件夹上一层
	pwd	显示当前目录
	git init	将当前目录文件变为Git可以管理的仓库
3、添加文件
	git add readme.txt	添加文件到仓库（一次添加一个）
	git commit -m "wrote a readme file" 	文件提交到仓库（一次提交多个）
		-m 后面为本次提交说明，方便从历史记录里找到改动记录
	新文件只保存， 没有添加和提交，git status显示 untracked状态，未被追踪
	工作区：learngit/ 	版本库: /.git	版本库包含暂存区：Stage		Stage包含master分支，有一个指向master的指针HEAD
	git add 把要提交的所有修改放到暂存区（Stage),
	git commit 一次性把暂存区的所有修改提交到分支
	git diff    #是工作区(work dict)和暂存区(stage)的比较

4、时光穿梭
	git status	查看仓库当前状态
	git diff	查看修改信息
	git log		查看提交的历史记录
	git reset --hard commit_id	在历史版本中穿梭
		commit id	对应版本id
		HEAD	当前版本
		HEAD^	上一个版本，HEAD^上上一个版本
		HEAD~100	往上第100个版本
	git log	查看提交历史，以便确定要退回哪个版本
	git reflog	查看命令历史和commit id 以便确定要回到未来哪个版本
	git checkout -- readme.txt 撤回工作区和暂存区的修改
		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
		命令中-- 很重要，没有它，就变成了“切换到另一个分支”的命令
	git reset HEAD file	暂存区的修改撤销掉（unstage），重新放回工作区,HEAD表示最新版本。
		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		
5、github教程
	要关联一个远程库，使用命令git remote add origin git@github.com:acount_name/repository_name.git；
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
6、分支管理
	git checkout -b feature1	创建并切换到feature1分支
	当前的feature1分支和master分支分别做add和commit后，合并分支fearture1到
		master会引起冲突，修改文件，在提交合并
	git log --graph --pretty=online --abbrev-commit	查看分支的合并情况
	git branch -d feature1 删除分支 -D	为强制删除
	git merge --no-ff -m "merge with no-ff" dev	合并分支dev，禁用Fast forward模式，方便在
		git log --graph时查看合并状态，即使删除分支后，可以从分支历史上看出分支信息。
	
	Bug分支管理
		当前在dev分支工作为完成，接到修复代号为101的bug任务，创建issue_101来修复
	git stash	储存当前工作现场，git status查看当前工作区为干净的，切换分支干活
	结束后回到dev分支，git stash list 查看stash内容
		git stash apply	恢复，stash内容不删除，需要用git stash drop来删除
		git stash pop	恢复的同时把stash内容也删除
		git stash apply stash@{0}	然后恢复指定的stash
	
	多人协作
		要查看远程库的信息，用git remote：
		$ git remote
		origin
		或者，用git remote -v显示更详细的信息：

		$ git remote -v
		origin  git@github.com:michaelliao/learngit.git (fetch)
		origin  git@github.com:michaelliao/learngit.git (push)
		首先，可以试图用git push origin branch-name推送自己的修改；
	多人协作模式：
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull抓取到本地再试图合并；
		如果合并有冲突，则解决冲突，并在本地提交；
		没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
			用命令git branch --set-upstream branch-name origin/branch-name。
		这就是多人协作的工作模式，一旦熟悉了，就非常简单。
	